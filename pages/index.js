import SearchBlock from "../components/search-block/SearchBlock";import ProductsList from "../components/products-list/ProductsList";import {useState} from "react";import {useRouter} from "next/router";import Nav from "../components/Nav/Nav";import {wrapper} from "../store/store.config";import {    getFilteredProducts,    getProducts,    getRunningOperationPromises,    useGetProductsQuery,} from "../store/products/products.api";import Preload from "../components/preload/Preload";import {useDispatch} from "react-redux";const Index = ({data}) => {    const router = useRouter();    const {data: products, isLoading} = useGetProductsQuery();    const [filteredProducts, setFilteredProducts] = useState(data);    const dispatch = useDispatch();    const handleSearch = (searchParams) => {        let query = '';        for (let key in searchParams) {            if (searchParams[key] !== null && searchParams[key] !== undefined && searchParams[key].length > 0) {                query = query.concat(`${key}=${searchParams[key]}&&`)            }        }        query = query.slice(0, -2)        router.push({                pathname: '/',                query: query            },            undefined, {shallow: true}        );       dispatch(getFilteredProducts.initiate(`?${query}`)).then(res =>{           setFilteredProducts(res.data)       })    }    return (        <>            <Nav/>            {                products ? isLoading ? <Preload/> : <SearchBlock onSearch={handleSearch} products={products}/> :<Preload/>            }            {                isLoading ? <Preload/> : <ProductsList products={filteredProducts}/>            }        </>    );}export default Index;export const getServerSideProps = wrapper.getServerSideProps(    (store) => async (context) => {        let data = [];        if (Object.keys(context.query).length > 0) {            let queryUrl = '?'            for (let key in context.query) {                queryUrl = queryUrl.concat(`${key}=${context.query[key]}&&`)            }            queryUrl = queryUrl.slice(0, -2)            await store.dispatch(getFilteredProducts.initiate(queryUrl)).then(res => data = res.data)        } else {            await store.dispatch(getProducts.initiate()).then(res => data = res.data)        }        await Promise.all(getRunningOperationPromises());        return {props: {data}}    });