import SearchBlock from "../components/search-block/SearchBlock";import ProductsList from "../components/products-list/ProductsList";import {useState} from "react";import {useRouter} from "next/router";import {wrapper} from "../store/store.config";import {fetchAllProducts, fetchFilteredProducts} from "../store/productsSlice";import {useDispatch, useSelector} from "react-redux";import Nav from "../components/Nav/Nav";const Index = () => {    const router = useRouter();    const products = useSelector(state => state.products.productsAll)    const [filteredProducts, setFilteredProducts] = useState([]);    let dispatch = useDispatch();    const handleSearch = (price, category) => {        let filteredData = [...products];        const query = {}        if (Number(price)) {            filteredData = filteredData.filter(product => (                product.amount <= price            ));            query['amount'] = price        }        if (category) {            filteredData = filteredData.filter(product => (                product.category === category            ));            query['category'] = category        }        router.push({                pathname: '/',                query: query            },            undefined, {shallow: true}        )        setFilteredProducts(filteredData);    }    const querySearch = (queryPrice, queryCategory) => {        let queryParam = '?';        if (queryPrice) {            queryParam = queryParam.concat('amount=').concat(queryPrice);        }        if (queryCategory) {            queryParam = queryParam.concat('&&category=').concat(queryCategory);        }        dispatch(fetchFilteredProducts(queryParam)).then(res => setFilteredProducts(res.payload))    }    return (        <>            <Nav/>            <SearchBlock onSearch={handleSearch} querySearch={querySearch}/>            <ProductsList products={filteredProducts}/>        </>    );}export default Index;export const getServerSideProps = wrapper.getServerSideProps(    (store) =>        async () => {            await store.dispatch(fetchAllProducts())            ;        })