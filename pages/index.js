import SearchBlock from "../components/search-block/SearchBlock";import ProductsList from "../components/products-list/ProductsList";import {useState} from "react";import {useRouter} from "next/router";import Nav from "../components/Nav/Nav";import {wrapper} from "../store/store.config";import {    getFilteredProducts,    getProducts,    getRunningOperationPromises,    useGetProductsQuery,} from "../store/products/products.api";import Preload from "../components/preload/Preload";const Index = ({data}) => {    const router = useRouter();    const {data: products, isLoading} = useGetProductsQuery();    const [filteredProducts, setFilteredProducts] = useState(data);    const handleSearch = (price, category) => {        const query = {}//TODO 3) по коду все ще продовжуєш окремо розглядати кожен фільтр, зроби об'єкт фільтр і використовуй його для перебора        if (price) {            query['amount'] = price        }        if (category) {            query['category'] = category        }        const getFiltered = (product) => {            if (category && product.category !== category) {                return false;            }            if (Number(price) && product.amount > Number(price)) {                return false;            }            return true;        };        setFilteredProducts(products.filter(getFiltered));        router.push({                pathname: '/',                query: query            },            undefined, {shallow: true}        );    }    return (        <>            <Nav/>            {isLoading                ? <Preload/>                : <SearchBlock onSearch={handleSearch} products={products}/> }            <ProductsList products={filteredProducts}/>        </>    );}export default Index;export const getServerSideProps = wrapper.getServerSideProps(    (store) => async (context) => {        let data = [];        if (Object.keys(context.query).length > 0) {            let queryUrl = '?'            for (let key in context.query) {                queryUrl = queryUrl.concat(`${key}=${context.query[key]}&&`)            }            await store.dispatch(getFilteredProducts.initiate(queryUrl)).then(res => data = res.data)        } else {            await store.dispatch(getProducts.initiate()).then(res => data = res.data)        }        await Promise.all(getRunningOperationPromises());        return {props: {data}}    });